# -*- mode: sh -*-
localrc="${BASH_SOURCE[0]}.local"
source "$localrc"
guest_userid_template=ZCC%05X
run_dir=/opt/cloudland/run
async_job_dir=$run_dir/async_job
cache_dir=/opt/cloudland/cache
cache_tmp_dir=$cache_dir/tmp
backup_dir=$cache_dir/backup
volume_dir=/opt/cloudland/cache/volume
image_dir=$cache_dir/instance
image_cache=$cache_dir/image
xml_dir=/opt/cloudland/cache/xml
template_dir=/opt/cloudland/scripts/xml
qemu_agent_dir=/opt/cloudland/cache/qemu_agent
container_dir=/var/lib/lxd/containers
dmasq_dir=/opt/cloudland/cache/dnsmasq
mudata_dir=/opt/cloudland/mudata
snapshot_dir=/var/snapshot
deploy_dir=/opt/cloudland/deploy
vxlan_db=/opt/cloudland/db/cloudland.db
cland_private_key=$deploy_dir/.ssh/cland.key
debug_log_file=/opt/cloudland/log/script.log
debug_flag_file=/opt/cloudland/run/debug
uefi_boot_loader=/usr/share/OVMF/OVMF_CODE_4M.fd
nvram_template=/usr/share/OVMF/OVMF_VARS_4M.fd
#export JAEGER_SERVICE_NAME="SCI-Backend"
function die()
{
    echo $1
    exit -1
}

function inet_aton()
{
    ip="$1"
    hex=`printf '%02x' ${ip//./ }`
    printf "%lu\n" "0x${hex}"
}

function inet_ntoa()
{
    num="$1"
    hex=`printf "%08x\n" ${num}`
    for i in `echo ${hex} | sed "s/\(..\)/\1 /g"`; do
        printf '%hu.' "0x${i}"
    done | sed "s/\.$//g"
}

function get_tunip()
{
	tunip=$(ifconfig $vxlan_interface | grep 'inet addr' | cut -d: -f2 | cut -d' ' -f1)
	echo "tunip=$tunip" >> $localrc
}

function apply_fw()
{
    action=$1
    chain=$2
    shift
    shift
    rule=$*
    if [ "$action" = '-I' -o "$action" = '-A' ]; then
        iptables -C $chain $rule 2>/dev/null
        [ $? -eq 0 ] && return
        if [ "$action" = '-I' ]; then
            iptables $action $chain 2 $rule
            return
        fi
    elif [ "$action" = '-N' ]; then
        iptables -S $chain || iptables -N $chain
    fi
    iptables $action $chain $rule
}

function apply_vnic()
{
    action=$1
    vnic=$2
    apply_fw $action FORWARD -m physdev --physdev-in $vnic --physdev-is-bridged -j ACCEPT
    apply_fw $action FORWARD -m physdev --physdev-out $vnic --physdev-is-bridged -j ACCEPT
}

function apply_bridge()
{
    action=$1
    mybr=$2
    apply_fw $action FORWARD -i $mybr -o $mybr -j ACCEPT
}

function sync_target()
{
    target=$1
    node=$2
    cd $deploy_dir
    group=hyper
    if [ -n "$node" ]; then
        group=$(cat hosts/hosts | grep client_id=$node | awk '{print $1}')
    fi
    ansible $group -u cland -b -a "chown -R cland.cland $target"
    ansible $group -u cland -m synchronize -a "src=$target dest=$target"
    cd -
}

function copy_target()
{
    target=$1
    node=$2
    cd $deploy_dir
    [ -n "$node" ] && hyper_node=$(cat hosts/hosts | grep client_id=$node | awk '{print $1}')
    scp -i $cland_private_key -o StrictHostKeyChecking=no -r ${target} cland@${hyper_node}:${target}
    cd -
}

function action_target()
{
    node=$1
    command=$2
    cd $deploy_dir
    [ -n "$node" ] && hyper_node=$(cat hosts/hosts | grep client_id=$node | awk '{print $1}')
    ssh -i $cland_private_key -o StrictHostKeyChecking=no cland@$hyper_node "$command"
    cd -
}

function sql_exec()
{
    if [ ! -f $vxlan_db ]; then
        mkdir /opt/cloudland/db
        touch $vxlan_db
        sqlite3 $vxlan_db "CREATE TABLE vxlan_rules (id INTEGER PRIMARY KEY AUTOINCREMENT, instance varchar(32), vni INTEGER, inner_ip varchar(32), inner_mac varchar(48), outer_ip varchar(32))"
    fi
    sqlite3 $vxlan_db "$*"
}

function get_wds_token()
{
    [ -z "$wds_token" ] && wds_token="bearer $(curl -L -XPOST -k "$wds_address/api/v1/login" -H "Content-Type: application/json" -d "{\"name\": \"$wds_admin\",\"password\": \"$wds_pass\"}" | jq -r .access_token)"
}

function wds_curl()
{
    action=$1
    path=$2
    data=$3
    [ -z "$data" ] && data='{}'
    get_wds_token
    curl -s -L -X$action -H 'Content-Type: application/json' -H "Authorization: $wds_token" -k "$wds_address/$path" -d "$data"
    echo
}

function get_uss_gateway()
{
    uss_name=$1
    [ -z "$uss_name" ] && uss_name=$(hostname -s)
    uss_name=$(echo $uss_name | tr -s '-' '_')
    uss_id=$(wds_curl GET "api/v2/wds/uss?name=$uss_name" | jq -r '.uss_gateways[0].id')
    [ -z "$uss_id" -o "$uss_id" = null ] && uss_id=$(wds_curl GET "api/v2/wds/uss" | jq --arg hname $(hostname -s) -r '.uss_gateways | .[] | select(.server_name == $hname) | .id')
    [ -n "$uss_id" ] && echo $uss_id
}

function delete_vhost()
{
    [ $# -lt 2 ] && return
    local vol_ID=$1
    local vhost_id=$2
    local uss_unbinded="true"
    local uss_id
    [ $# -eq 3 ] && uss_id=$3 && uss_unbinded="false"

    if [ "$uss_unbinded" == "false" ]; then
        # add retry logic
        local i
        for i in {1..5}; do
            log_debug $vol_ID "Attempting to unbind volume($vol_ID)'s vhost $vhost_id from uss $uss_id"
            local unbind_ret=$(wds_curl PUT "api/v2/sync/block/vhost/unbind_uss" "{\"vhost_id\": \"$vhost_id\", \"uss_gw_id\": \"$uss_id\", \"is_snapshot\": false}")
            local ret_code=$(echo $unbind_ret | jq -r '.ret_code')
            if [ "$ret_code" == "0" ]; then
                log_debug $vol_ID "Successfully unbound volume($vol_ID)'s vhost $vhost_id from uss $uss_id"
                uss_unbinded="true"
                break
            else
                local err_message=$(echo $unbind_ret | jq -r '.message')
                log_debug $vol_ID "Failed to unbind volume($vol_ID)'s vhost $vhost_id from uss $uss_id, error message: $err_message"
            fi
            sleep 1
        done
    fi
    if [ "$uss_unbinded" == "true" ]; then
        local vhost_deleted="false"
        log_debug $vol_ID "Proceeding to delete volume($vol_ID)'s vhost $vhost_id"
        local i
        for i in {1..5}; do
            local delete_ret=$(wds_curl DELETE "api/v2/sync/block/vhost/$vhost_id")
            local ret_code=$(echo $delete_ret | jq -r '.ret_code')
            if [ "$ret_code" == "0" ]; then
                log_debug $vol_ID "Successfully deleted volume($vol_ID)'s vhost $vhost_id"
                vhost_deleted="true"
                break
            else
                local err_message=$(echo $delete_ret | jq -r '.message')
                log_debug $vol_ID "Failed to delete volume($vol_ID)'s vhost $vhost_id, error message: $err_message"
            fi
            sleep 1
        done
        if [ "$vhost_deleted" == "true" ]; then
            log_debug $vol_ID "Successfully deleted volume($vol_ID)'s vhost $vhost_id"
        else
            log_debug $vol_ID "Failed to delete volume($vol_ID)'s vhost $vhost_id after multiple attempts"
        fi
    else
        log_debug $vol_ID "Failed to unbind volume($vol_ID)'s vhost $vhost_id from uss $uss_id after multiple attempts; skipping deletion of vhost"
    fi
}

function async_exec()
{
    exec 3<&0
    mkdir -p $async_job_dir
    (
        delayed_log=$async_job_dir/$(date +%s.%N)
        exec 0<&3
        exec >${delayed_log}.in_progress 2>&1
        $*
        mv ${delayed_log}.in_progress ${delayed_log}.done
    ) &
    exec 3<&-
}

function log_debug()
{
    # check if parameter count less than 2
    [ $# -lt 2 ] && return
    local vm_ID=$1
    shift
    # check if debug file exists
    if [ -f $debug_flag_file ]; then
        # write log and timestamp to debug log file
        echo "[$(date -u +%Y%m%d%H%M%S)] $vm_ID $*" >> $debug_log_file
    fi
}

function inet_access()
{
    mkdir -p /etc/netns/router-0
    echo "nameserver $dns_server" >/etc/netns/router-0/resolv.conf
    ip netns exec router-0 iptables -D INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
    ip netns exec router-0 iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
    ip netns exec router-0 $*
    ip netns exec router-0 iptables -D INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
}

function get_uuid_prefix()
{
    [ $# -lt 1 ] && return
    uuid=$1
    prefix=${uuid%%-*}
    echo "$prefix"
}

function wait_qemu_ping()
{
    vm_ID=inst-$1
    num=$2
    [ -z "$num" ] && num=0
    count=0
    for i in {1..240}; do
        virsh qemu-agent-command "$vm_ID" '{"execute":"guest-ping"}'
        if [ $? -eq 0 ]; then
            let count=$count+1
        fi
        [ $count -gt $num ] && break
        sleep 5
    done
}
