- name: creates cloudland directory
  file:
    path: "{{ item }}"
    state: directory
    owner: cland
  with_items:
    - /opt/cloudland
    - /usr/bin
  tags: [sync]

- name: synchronize cloudland
  synchronize:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    rsync_opts: "--exclude=cache,--exclude=log,--exclude=db"
  with_items:
    - {src: '/opt/cloudland', dest: '/opt', owner: 'cland'}
  tags: [sync]
  when: inventory_hostname != ansible_hostname

- name: copy sci binaries
  copy: 
    src: /opt/sci
    dest: /opt
    mode: preserve
  tags: [sci]
  when: inventory_hostname != ansible_hostname

- name: create directores
  file:
    path: "{{ item }}"
    state: directory
    owner: cland
    group: cland
  with_items:
    - '/opt/cloudland/cache'
    - '/opt/cloudland/cache/image'
    - '/opt/cloudland/cache/instance'
    - '/opt/cloudland/cache/router'
  tags: [fe_dir]

- name: create sysconfig directory
  file:
    path: "/etc/sysconfig"
    state: directory
    owner: root
    group: root
  tags: [fe_dir]

- name: copy cloudland and sci binaries
  copy: 
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: preserve
  with_items:
    - {src: '/opt/cloudland/lib64', dest: '/opt/cloudland', owner: 'cland'}
    - {src: '/opt/cloudland/bin', dest: '/opt/cloudland', owner: 'cland'}
    - {src: '/opt/cloudland/scripts', dest: '/opt/cloudland', owner: 'cland'}
    - {src: '/opt/sci', dest: '/opt', owner: 'root'}
  tags: [fe_bin]
  when: inventory_hostname != ansible_hostname

- name: generate host file
  template:
    src: host.list.j2
    dest: /opt/cloudland/etc/host.list
  tags: [gen_host_list]

- name: copy cloudland service files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: preserve
  with_items:
    - {src: 'cloudland.service', dest: '/lib/systemd/system', owner: 'root'}
    - {src: 'cloudland.sh', dest: '/usr/local/bin', owner: 'cland'}
  tags: [fe_srv]

- name: create cloudland environment file
  template:
    src: cloudland.j2
    dest: /etc/sysconfig/cloudland
  tags: [fe_srv]
 
- name: start cloudland services
  systemd: 
    name: cloudland
    enabled: yes
    daemon_reload: yes
    state: started
  tags: [fe_srv]

- name: Check if current host also hyper
  set_fact:
     is_current_in_hyper: "{{ inventory_hostname in groups['hyper'] }}"
  tags: [monitor]

- name: Setup prometheus-node-exporter for hyper nodes
  block:
    - name: Set node exporter port variable
      set_fact:
        node_exporter_port: 9101

    - name: Install prometheus-node-exporter without starting
      become: true
      apt:
        name: prometheus-node-exporter
        state: present
      register: pkg_install
      ignore_errors: true

    - name: Force stop node exporter after install
      become: true
      systemd:
        name: prometheus-node-exporter
        state: stopped
      ignore_errors: true
      changed_when: false
      when: pkg_install is succeeded

    - name: Ensure systemd override directory exists
      file:
        path: /etc/systemd/system/prometheus-node-exporter.service.d
        state: directory
        owner: root
        group: root
        mode: '0755'
      ignore_errors: true

    - name: Ensure /var/lib/node_exporter exists and set owner/permission
      file:
        path: /var/lib/node_exporter
        state: directory
        owner: prometheus
        group: prometheus
        mode: '0755'
      tags: [monitor]

    - name: Configure Node Exporter with textfile directory
      become: true
      copy:
        dest: /etc/systemd/system/prometheus-node-exporter.service.d/override.conf
        content: |
          [Service]
          ExecStart=
          ExecStart=/usr/bin/prometheus-node-exporter --web.listen-address=:{{ node_exporter_port }} --collector.textfile.directory=/var/lib/node_exporter
        mode: '0644'
        owner: root
        group: root
      ignore_errors: true


    - name: Apply systemd configuration changes
      become: true
      systemd:
        daemon_reload: yes
        name: prometheus-node-exporter
      changed_when: false
      ignore_errors: true


    - name: Ensure service started with new config is enabled and started
      become: true
      systemd:
        name: prometheus-node-exporter
        enabled: yes
        state: restarted
        daemon_reload: no
      register: service_status
      until: service_status.status.ActiveState == "active"
      retries: 3
      delay: 5
      ignore_errors: true

  when: not is_current_in_hyper
  tags: [monitor]
